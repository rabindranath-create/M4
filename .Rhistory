bgwin <- owin(c(xStart, xEnd),c(yStart, yEnd))
gx <- xEnd-xStart # length of x-range 80
gy <- yEnd-yStart # length of y-range 80
mypp <- runifpoint(rpois(1,noPoints), win = bgwin)
for (i in c(1:noPatterns)) {
if (ppType == 1) { # CSR - complete spatial randomness, i.e. Hom. Poisson
mypp <- runifpoint(rpois(1,noPoints), win = bgwin)
#mypp <- runifpoint(noPoints, win = bgwin) # EXACT no. of points
#plot(mypp); mypp
} else if (ppType == 2) { # Inhom. Poisson
#this gives about 100 bg points on the average:
Z <- as.im(function(x, y) {31 * exp(2*y)}, unit.square());
temp <- rpoispp(Z, win=bgwin)
# need to scale the unit square to our bgwindow:
myx <- 10 + 80*temp$x
myy <- 10 + 80*(1-temp$y) #so that more density is towards the bottom of the bgwindow
mypp <- ppp(myx, myy, window=bgwin)
#plot(mypp); mypp
# test for mean:
#sum <- 0
#for (i in c(1:1000)) {
#	Z <- as.im(function(x, y) {31 * exp(2*y)}, unit.square());
#	temp <- rpoispp(Z, win=bgwin)
#	sum <- sum + temp$n
#}
#mean <- sum/1000; mean
} else if (ppType == 3) { # Matern
r     <- 10
mu    <- 10
kappa <- (noPoints / (gx*gy)) / mu
mypp  <- rMatClust(kappa, r, mu, win=bgwin)
#plot(mypp); mypp
} else if (ppType == 4) { # Thomas
sigma <- 5
mu    <- 10
kappa <- (noPoints / (gx*gy)) / mu
mypp  <- rThomas(kappa, sigma, mu, win=bgwin)
#plot(mypp); mypp
} else if (ppType == 5) { # Hard-core
kappa <- noPoints / (gx*gy)
mypar <- list(beta = kappa, gamma = 0.0, r = 5) # r is the radius
mo <- list(cif = "strauss", par = mypar, w = bgwin)
## with p=1, the initial points just get shifted, so there will be EXACTLY n.start points
mypp <- rmh(model = mo, start = list(n.start = rpois(1,noPoints)), control = list(nrep = 100000, p=1))
#plot(mypp); mypp
} else if (ppType == 6) { # Strauss
kappa <- noPoints / (gx*gy)
mypar <- list(beta = kappa, gamma = 0.5, r = 5)
mo <- list(cif = "strauss", par = mypar, w = bgwin)
mypp <- rmh(model = mo, start = list(n.start = rpois(1,noPoints)), control = list(nrep = 100000, p=1))
#plot(mypp); mypp
} # end if
radii <- rep(radius, mypp$n)
marks <- rbeta(mypp$n, 2, 6) # sample from beta dist.
outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
dirPath <- paste("code/bgpp", ppType, sep = "")
dir.create(dirPath, recursive = TRUE, showWarnings = FALSE)
fileName <- paste("code/bgpp", ppType, "/bgno", i, ".csv", sep = "")
write.table(outDF,
file = fileName,
sep=",",
row.names=FALSE,
col.names=FALSE)
# write the bg point pattern to a csv file for MbATLAB use:
#outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
#fileName <- paste("code/bgpp", ppType, "/bgno", i, ".csv", sep = "")
#write.table(outDF, file = fileName, sep=",", row.names=FALSE, col.names=FALSE)
}
##args <- commandArgs(trailingOnly = TRUE) ###batch mode
args = c(6, 100, 100) ###R mode
ppType     <- as.numeric(args[1])
noPoints   <- as.numeric(args[2])
noPatterns <- as.numeric(args[3])
radius <- 4.5
# the following are for sampling bg point centers:
xStart <- 10
xEnd   <- 90
yStart <- 10
yEnd   <- 90
#background window: owin(x-range, y-range)
bgwin <- owin(c(xStart, xEnd),c(yStart, yEnd))
gx <- xEnd-xStart # length of x-range 80
gy <- yEnd-yStart # length of y-range 80
mypp <- runifpoint(rpois(1,noPoints), win = bgwin)
for (i in c(1:noPatterns)) {
if (ppType == 1) { # CSR - complete spatial randomness, i.e. Hom. Poisson
mypp <- runifpoint(rpois(1,noPoints), win = bgwin)
#mypp <- runifpoint(noPoints, win = bgwin) # EXACT no. of points
#plot(mypp); mypp
} else if (ppType == 2) { # Inhom. Poisson
#this gives about 100 bg points on the average:
Z <- as.im(function(x, y) {31 * exp(2*y)}, unit.square());
temp <- rpoispp(Z, win=bgwin)
# need to scale the unit square to our bgwindow:
myx <- 10 + 80*temp$x
myy <- 10 + 80*(1-temp$y) #so that more density is towards the bottom of the bgwindow
mypp <- ppp(myx, myy, window=bgwin)
#plot(mypp); mypp
# test for mean:
#sum <- 0
#for (i in c(1:1000)) {
#	Z <- as.im(function(x, y) {31 * exp(2*y)}, unit.square());
#	temp <- rpoispp(Z, win=bgwin)
#	sum <- sum + temp$n
#}
#mean <- sum/1000; mean
} else if (ppType == 3) { # Matern
r     <- 10
mu    <- 10
kappa <- (noPoints / (gx*gy)) / mu
mypp  <- rMatClust(kappa, r, mu, win=bgwin)
#plot(mypp); mypp
} else if (ppType == 4) { # Thomas
sigma <- 5
mu    <- 10
kappa <- (noPoints / (gx*gy)) / mu
mypp  <- rThomas(kappa, sigma, mu, win=bgwin)
#plot(mypp); mypp
} else if (ppType == 5) { # Hard-core
kappa <- noPoints / (gx*gy)
mypar <- list(beta = kappa, gamma = 0.0, r = 5) # r is the radius
mo <- list(cif = "strauss", par = mypar, w = bgwin)
## with p=1, the initial points just get shifted, so there will be EXACTLY n.start points
mypp <- rmh(model = mo, start = list(n.start = rpois(1,noPoints)), control = list(nrep = 100000, p=1))
#plot(mypp); mypp
} else if (ppType == 6) { # Strauss
kappa <- noPoints / (gx*gy)
mypar <- list(beta = kappa, gamma = 0.5, r = 5)
mo <- list(cif = "strauss", par = mypar, w = bgwin)
mypp <- rmh(model = mo, start = list(n.start = rpois(1,noPoints)), control = list(nrep = 100000, p=1))
#plot(mypp); mypp
} # end if
radii <- rep(radius, mypp$n)
marks <- rbeta(mypp$n, 2, 6) # sample from beta dist.
outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
dirPath <- paste("code/bgpp", ppType, sep = "")
dir.create(dirPath, recursive = TRUE, showWarnings = FALSE)
fileName <- paste("code/bgpp", ppType, "/bgno", i, ".csv", sep = "")
write.table(outDF,
file = fileName,
sep=",",
row.names=FALSE,
col.names=FALSE)
# write the bg point pattern to a csv file for MbATLAB use:
#outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
#fileName <- paste("code/bgpp", ppType, "/bgno", i, ".csv", sep = "")
#write.table(outDF, file = fileName, sep=",", row.names=FALSE, col.names=FALSE)
}
# there will always be EXACTLY 'noPoints' true obstacles
rm(list = ls())                 # Clear variables
while (!is.null(dev.list())) dev.off()  # Close all plots
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
library(spatstat)
set.seed(2)
args <- commandArgs(trailingOnly = TRUE) ###batch mode
for(ii in 1:19){
for(jj in 1:100){
for (kk in c(20, 30, 40, 50, 60)){
args = c(ii, kk, 1, jj) ###R mode
ppType   <- as.numeric(args[1]) ## this is obst. pp type
noPoints <- as.numeric(args[2])
bgType   <- as.numeric(args[3])
iterNo   <- as.numeric(args[4])
radius <- 4.5
xStart <- 10
xEnd   <- 90
yStart <- 10
yEnd   <- 90
#background window: owin(x-range, y-range)
bgwin <- owin(c(xStart, xEnd),c(yStart, yEnd))
gx <- xEnd-xStart # length of x-range
gy <- yEnd-yStart # length of y-range
xRange <- c(xStart, xEnd)
#if (ppType == 1) { # CSR - complete spatial randomness, i.e. hom. Poisson
if ( ppType == 1){
mypp <- runifpoint(noPoints, win = bgwin) # EXACT no. of points
#plot(mypp); mypp
} else if ( ppType == 2){ # strip layout
obstwin <- owin(c(xStart, xEnd), c(10,20))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 3) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(20,30))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 4) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(30,40))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 5) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(40,50))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 6) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(50,60))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 7) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(60,70))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 8) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(70,80))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 9) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(80,90))
mypp    <- runifpoint(noPoints, win = obstwin)
#############
} else if ( ppType == 10) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(50,40,10,40,50,20)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 11) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(60,50,20,50,60,30)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 12){ # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(70,60,30,60,70,40)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 13) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(80,70,40,70,80,50)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 15) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(90,80,50,80,90,60)))
mypp    <- runifpoint(noPoints, win = obstwin)
############
} else if ( ppType == 15) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(50,40,10,40,10,40,50,20,50,20)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 16) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(60,50,20,50,20,50,60,30,60,30)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 17) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(70,60,30,60,30,60,70,40,70,40)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 18) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(80,70,40,70,40,70,80,50,80,50)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 19) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(90,80,50,80,50,80,90,60,90,60)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 20) { # fill in the blanks using the dirichlet tess.
# read in the bgpp
bgppFileName <- paste("code/bgpp", bgType, "/bgno", iterNo, ".csv", sep = "")
bgppRaw <- read.table(file = bgppFileName, sep=",")
bgpp <- ppp(bgppRaw[,1], bgppRaw[,2], window=bgwin)
#plot(bgpp)
maxNoBGDisksInTryWin <- 0 # initialize
maxNoBGDisksIndex    <- 0 # initialize
# try all 10-unit width windows betw/ y=10 to y=90 with 5 unit increments
# and then find the one that has the most no. of disks in it
# this window will be the obst. window
# the obst. pp will be generated as follows:
# 1- generate the dirichlet tesselation of the obst. window
# 2- determine how many points will be in each tess. tile,
#   which will be proportional to the area of the tile
# 3- generate CSR with that many points inside each tile
for (winind in 2:16) {
yStartTryWin <- winind*5
trywin <- owin(c(xStart, xEnd), c(yStartTryWin, yStartTryWin+10))
tryinters <- ppp(bgpp$x, bgpp$y, window=trywin) # bgpp points within obstwin: obtained via intersection
tryinters <- as.ppp(tryinters) # remove the rejects, cannot do both in one command...
if (tryinters$n >= maxNoBGDisksInTryWin) {
maxNoBGDisksIndex <- winind
maxNoBGDisksInTryWin <- tryinters$n
obstwin <- trywin
inters  <- tryinters
}
}
# this is to use the middle strip in Voronoi tess.:
###obstwin <- owin(c(xStart, xEnd), c(45, 55))
###inters <- ppp(bgpp$x, bgpp$y, window=obstwin) # bgpp points within obstwin: obtained via intersection
###inters <- as.ppp(inters) # remove the rejects, cannot do both in one command...
mypp <- runifpoint(0, win = obstwin) # initialize obst. pp with zero points
# compute the dirichlet tesselation
dirtess <- dirichlet(inters)
#plot(dirtess, add=T)
#plot(inters, add=T)
##keep this code here in case we need later:
##delt <- delaunay(inters)
##deldirt <- deldir(inters$x, inters$y)
# get the tiles of the dir. tess.
tileList <- tiles(dirtess)
# compute the area of each tile
tileAreaList <- unlist(lapply(tileList, area.owin))
# tot. tile area will be fixed as below
totTileArea <- gx * 10
#no. of obst. disks in each tile is proportional to the tile's area:
for (i in 1:length(tileAreaList)) {
tileArea <- tileAreaList[i]
tileWin <- as.owin(dirtess[i])
tileNoPoints <- round((tileArea/totTileArea) * noPoints)
tilepp <- runifpoint(tileNoPoints, win = tileWin)
mypp <- superimpose(mypp, tilepp)
}
#plot(mypp, add=T, col='red')
} else if ( ppType == 8){ # straight line-layout - middle of bgwin
xcoord <- seq(xStart, xEnd, by=(xEnd-xStart)/(noPoints-1))
ycoord <- rep((yStart+yEnd)/2,noPoints)
obstwin <- owin(c(xStart, xEnd), c(((yStart+yEnd)/2)-1,((yStart+yEnd)/2)+1))
mypp <- ppp(xcoord, ycoord, window=obstwin)
}
radii <- rep(radius, mypp$n)
marks <- rbeta(mypp$n, 6, 2) # sample from beta dist.
# write obst. pp to a csv file for MATLAB use:
outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
dirPath <- paste("code/obstpp", ppType, sep = "")
dir.create(dirPath, recursive = TRUE, showWarnings = FALSE)
fileName <- paste("code/obstpp", ppType, "/obstpp", ppType, "_", noPoints, "_", iterNo, ".csv", sep = "")
write.table(outDF, file = fileName, sep=",", row.names=FALSE, col.names=FALSE)
}
}
}
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
library(spatstat)
set.seed(2)
args <- commandArgs(trailingOnly = TRUE) ###batch mode
for(ii in 1:19){
for(jj in 1:100){
for (kk in c(20, 30, 40, 50, 60)){
args = c(ii, kk, 1, jj) ###R mode
ppType   <- as.numeric(args[1]) ## this is obst. pp type
noPoints <- as.numeric(args[2])
bgType   <- as.numeric(args[3])
iterNo   <- as.numeric(args[4])
radius <- 4.5
xStart <- 10
xEnd   <- 90
yStart <- 10
yEnd   <- 90
#background window: owin(x-range, y-range)
bgwin <- owin(c(xStart, xEnd),c(yStart, yEnd))
gx <- xEnd-xStart # length of x-range
gy <- yEnd-yStart # length of y-range
xRange <- c(xStart, xEnd)
#if (ppType == 1) { # CSR - complete spatial randomness, i.e. hom. Poisson
if ( ppType == 1){
mypp <- runifpoint(noPoints, win = bgwin) # EXACT no. of points
#plot(mypp); mypp
} else if ( ppType == 2){ # strip layout
obstwin <- owin(c(xStart, xEnd), c(10,20))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 3) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(20,30))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 4) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(30,40))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 5) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(40,50))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 6) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(50,60))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 7) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(60,70))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 8) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(70,80))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 9) { # strip layout
obstwin <- owin(c(xStart, xEnd), c(80,90))
mypp    <- runifpoint(noPoints, win = obstwin)
#############
} else if ( ppType == 10) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(50,40,10,40,50,20)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 11) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(60,50,20,50,60,30)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 12){ # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(70,60,30,60,70,40)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 13) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(80,70,40,70,80,50)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 15) { # V shape
obstwin <- owin(poly=list(x=c(5,5,50,95,95,50),y=c(90,80,50,80,90,60)))
mypp    <- runifpoint(noPoints, win = obstwin)
############
} else if ( ppType == 15) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(50,40,10,40,10,40,50,20,50,20)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 16) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(60,50,20,50,20,50,60,30,60,30)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 17) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(70,60,30,60,30,60,70,40,70,40)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 18) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(80,70,40,70,40,70,80,50,80,50)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 19) { # W shape
obstwin <- owin(poly=list(x=c(5,5,28,50,73,95,95,73,50,28),
y=c(90,80,50,80,50,80,90,60,90,60)))
mypp    <- runifpoint(noPoints, win = obstwin)
} else if ( ppType == 20) { # fill in the blanks using the dirichlet tess.
# read in the bgpp
bgppFileName <- paste("code/bgpp", bgType, "/bgno", iterNo, ".csv", sep = "")
bgppRaw <- read.table(file = bgppFileName, sep=",")
bgpp <- ppp(bgppRaw[,1], bgppRaw[,2], window=bgwin)
#plot(bgpp)
maxNoBGDisksInTryWin <- 0 # initialize
maxNoBGDisksIndex    <- 0 # initialize
# try all 10-unit width windows betw/ y=10 to y=90 with 5 unit increments
# and then find the one that has the most no. of disks in it
# this window will be the obst. window
# the obst. pp will be generated as follows:
# 1- generate the dirichlet tesselation of the obst. window
# 2- determine how many points will be in each tess. tile,
#   which will be proportional to the area of the tile
# 3- generate CSR with that many points inside each tile
for (winind in 2:16) {
yStartTryWin <- winind*5
trywin <- owin(c(xStart, xEnd), c(yStartTryWin, yStartTryWin+10))
tryinters <- ppp(bgpp$x, bgpp$y, window=trywin) # bgpp points within obstwin: obtained via intersection
tryinters <- as.ppp(tryinters) # remove the rejects, cannot do both in one command...
if (tryinters$n >= maxNoBGDisksInTryWin) {
maxNoBGDisksIndex <- winind
maxNoBGDisksInTryWin <- tryinters$n
obstwin <- trywin
inters  <- tryinters
}
}
# this is to use the middle strip in Voronoi tess.:
###obstwin <- owin(c(xStart, xEnd), c(45, 55))
###inters <- ppp(bgpp$x, bgpp$y, window=obstwin) # bgpp points within obstwin: obtained via intersection
###inters <- as.ppp(inters) # remove the rejects, cannot do both in one command...
mypp <- runifpoint(0, win = obstwin) # initialize obst. pp with zero points
# compute the dirichlet tesselation
dirtess <- dirichlet(inters)
#plot(dirtess, add=T)
#plot(inters, add=T)
##keep this code here in case we need later:
##delt <- delaunay(inters)
##deldirt <- deldir(inters$x, inters$y)
# get the tiles of the dir. tess.
tileList <- tiles(dirtess)
# compute the area of each tile
tileAreaList <- unlist(lapply(tileList, area.owin))
# tot. tile area will be fixed as below
totTileArea <- gx * 10
#no. of obst. disks in each tile is proportional to the tile's area:
for (i in 1:length(tileAreaList)) {
tileArea <- tileAreaList[i]
tileWin <- as.owin(dirtess[i])
tileNoPoints <- round((tileArea/totTileArea) * noPoints)
tilepp <- runifpoint(tileNoPoints, win = tileWin)
mypp <- superimpose(mypp, tilepp)
}
#plot(mypp, add=T, col='red')
} else if ( ppType == 8){ # straight line-layout - middle of bgwin
xcoord <- seq(xStart, xEnd, by=(xEnd-xStart)/(noPoints-1))
ycoord <- rep((yStart+yEnd)/2,noPoints)
obstwin <- owin(c(xStart, xEnd), c(((yStart+yEnd)/2)-1,((yStart+yEnd)/2)+1))
mypp <- ppp(xcoord, ycoord, window=obstwin)
}
radii <- rep(radius, mypp$n)
marks <- rbeta(mypp$n, 6, 2) # sample from beta dist.
# write obst. pp to a csv file for MATLAB use:
outDF <- as.data.frame(cbind(mypp$x, mypp$y, radii, marks))
dirPath <- paste("code/obstpp", ppType, sep = "")
dir.create(dirPath, recursive = TRUE, showWarnings = FALSE)
fileName <- paste("code/obstpp", ppType, "/obstpp", ppType, "_", noPoints, "_", iterNo, ".csv", sep = "")
write.table(outDF, file = fileName, sep=",", row.names=FALSE, col.names=FALSE)
}
}
}
rm(list = ls())                 # Clear variables
while (!is.null(dev.list())) dev.off()  # Close all plots
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
rm(list = ls())                 # Clear variables
while (!is.null(dev.list())) dev.off()  # Close all plots
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
for (q in 1:100) {
old_filename <- paste0("main_script", q, " copy.R")
new_filename <- paste0("main_script", q, ".R")
lines <- readLines(old_filename)
lines <- gsub("RD_Alg_M", "M16", lines)
writeLines(lines, new_filename)
}
rm(list = ls())                 # Clear variables
while (!is.null(dev.list())) dev.off()  # Close all plots
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
for (q in 1:100) {
filename <- paste0("main_script", q, ".R")
lines <- readLines(filename)
lines <- gsub("M16", "M8", lines)
writeLines(lines, filename)
}
rm(list = ls())                 # Clear variables
while (!is.null(dev.list())) dev.off()  # Close all plots
library("rstudioapi") # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd() # Check updated working directory
for (q in 1:100) {
filename <- paste0("main_script", q, ".R")
lines <- readLines(filename)
lines <- gsub("M8", "M4", lines)
writeLines(lines, filename)
}
